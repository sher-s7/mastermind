class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end
end

def rand_code_generator()
    return [rand(1..6), rand(1..6), rand(1..6), rand(1..6)].join()
end

class Decoder
  
  attr_accessor :guesses, :TRIES

  def initialize(game_mode)
    @@TRIES = 4
    @game_mode = game_mode
    if @game_mode == 1
      @CODE = rand_code_generator
    else
      puts 'Enter your 4 digit code. Each digit can be anywhere from 1 to 6. Example: "3651"'
      begin
        code = gets.chomp
        raise 'Error: Enter a compatible 4 digit code' if !compatible_num?(code)
      rescue Exception=>e
        puts e 
        retry
      end
      @CODE = code
    end

    @guesses = []

    play(@game_mode)
  end

  def compare(guess)
    dupl_code = self.CODE.dup
    compared = ["", "", "", ""]
    (0..3).each do |i|
      if (dupl_code[i] == guess[i])
        compared[i] = guess[i].green
        dupl_code[dupl_code.index(guess[i])] = "x"
      end
    end
    (0..3).each do |i|
      if (compared[i] == "")
        if (dupl_code.include?(guess[i]))
          compared[i] = guess[i]
          dupl_code[dupl_code.index(guess[i])] = "x"
        else
          compared[i] = guess[i].red
        end
      end
    end
    guesses.push(compared.join)
    puts guesses.last
    # puts self.CODE

  end

  def compatible_num?(str) #checks if digits of number are within range, and if length is 4
    return false if str.length != 4
    (0..3).each do |i|
      return false if !str[i].to_i.between?(1, 6)
    end
    return true
  end

  

  def play(game_mode)
    human_decoder() if game_mode==1
    computer_decoder() if game_mode==2
  end

  def human_decoder()
    (0..@@TRIES).each do |i|
      puts "Guesses: #{guesses}"
      begin
        puts 'Enter your guess (ex. "1234")'
        guess = gets.chomp
        if (!compatible_num?(guess))
          raise "Error: Invalid guess"
        end
      rescue Exception => e
        puts e
        retry
      end
      if (guess == self.CODE)
        puts guess.green
        puts "You won with #{guesses.length + 1} guesses!"
        return
      end
      compare(guess)
    end
    puts
    puts "------------"
    puts
    puts "Game over. Your guesses:"
    guesses.each { |g| puts g }
    puts
    puts "Correct code: #{self.CODE.green}"

  end

  def best_guess(guess, whitelist)
    code = self.CODE
    best_guess = ['','','','']
    (0..3).each do |i|
      if code[i] == guess[i]
        best_guess[i] = guess[i]
      elsif !code.include?(guess[i])
        if whitelist.include?(guess[i])
          whitelist.delete(guess[i])
        end
      end
    end
    puts guess
    return best_guess
  end

  def computer_decoder()
    guess_num = 0
    puts
    guess = rand_code_generator
    whitelist = ['1','2','3','4','5','6']
    if (guess == self.CODE)
      puts guess.green
      puts "Computer won with #{guess_num + 1} guesses!"
      return
    end
    (0..@@TRIES).each do |i|
      guess = best_guess(guess, whitelist)
      guess_num +=1
      guess.each_with_index do |n, i|
        if n==''
          guess[i] = whitelist.sample
        end
      end
      guess = guess.join()
      if guess == self.CODE
        puts guess.green
        puts "Computer won with #{guess_num + 1} guesses!"
        return
      end

    end
    puts 'Computer lost. Good job'
  end

  protected

  def CODE()
    @CODE
  end
end




def continue_story()
    puts
    puts "Press enter to continue..."
    gets
    puts "---------------------"
    puts
  end

puts "Welcome to Mastermind.\nA secret 4 digit code is generated by the computer and your job is to crack the code.".green
continue_story
puts "Each digit can be between 1-6, and you get 6 guesses.\nFor every guess you make, you will receive feedback.".green
continue_story
puts "If you guess a number that is in the code, but in the wrong position,\nit will show up white."
puts "If you guess a number that is in the code, and in the right place,\nit will show up green.".green
puts "If you guess a number that is either not in the code, or is a duplicate,\nit will show up as red.".red
continue_story
puts "Use this feedback to narrow down your guess to the correct code. Good luck!".green
continue_story
puts
while true
  Decoder.new(2)
  puts "Play again? (y/n)"
  begin
    answer = gets.chomp
    if (answer.downcase != "y" && answer.downcase != "n")
      raise 'Please enter "y" or "n" (yes or no)'
    end
  rescue Exception => e
    puts e
    retry
  end
  return if answer.downcase == "n"
end
